{"version":3,"sources":["components/webcam-overlay.js"],"names":["AFRAME","registerComponent","init","el","components","material","colorWrite","blending","schema","blurAmount","type","default","tintAmount","scene","document","querySelector","resolution","THREE","Vector2","isDirty","textureSet","self","window","addEventListener","updateResolution","data","setAttribute","rendererSize","renderer","getSize","sWidth","width","sHeight","height","w","innerWidth","h","innerHeight","deltaX","x","offsetX","Math","abs","y","set","tick","webcamEl","getElementById","deltaY","offsetY","registerShader","map","is","vertexShader","fragmentShader"],"mappings":"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","file":"webcam-overlay.7a80f8a3.js","sourceRoot":"../../src","sourcesContent":["AFRAME.registerComponent('mask', {\n  init: function() {\n    this.el.components.material.colorWrite = false\n    this.el.components.material.blending = \"subtractive\"\n    //this.el.object3D.renderOrder = 300;\n    // this.el.components.material.c\n  }\n})\n\nAFRAME.registerComponent(\"webcam-overlay-helper\", {\n  schema: {\n    blurAmount: {\n      type: 'number',\n      default: 1.0\n    },\n    tintAmount: {\n      type: 'number',\n      default: 0.4\n    }\n  },\n\n  init: function( ){\n    this.scene = document.querySelector('a-scene');\n    this.resolution = new THREE.Vector2(1,1);\n\n    this.isDirty = true\n    this.textureSet = false\n\n    let self = this\n\n    // TODO: Why is this called all of the time?\n    window.addEventListener('resize', function() {\n      self.updateResolution()\n    });\n\n    let blurAmount = new THREE.Vector2(this.data.blurAmount, this.data.blurAmount);\n    this.el.setAttribute('material', 'blurAmount', blurAmount);\n    this.el.setAttribute('material', 'tintAmount', this.data.tintAmount);\n\n    this.updateResolution()\n  },\n  // We need to update the resolution to pass to the blur function\n  // in our shader\n  updateResolution: function() {\n\n    let rendererSize = new THREE.Vector2()\n    this.scene.renderer.getSize(rendererSize)\n\n    let sWidth = rendererSize.width\n    let sHeight = rendererSize.height\n\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n\n    // console.log(\"renderer size\")\n    // console.log(rendererSize)\n    //\n    // console.log(\"window\")\n    // console.log(w)\n    // console.log(h)\n\n    let deltaX = (rendererSize.x - w) * 0.5;\n    let offsetX = deltaX / rendererSize.x;\n\n    // We shouldn't have to do this if this is only called on resize...\n    // But trying to avoid triggering a constant update on the attributes\n    if (Math.abs(this.resolution.x - sWidth) + Math.abs(this.resolution.y - sHeight) > 0) {\n      this.isDirty = true\n      this.resolution.set(sWidth, sHeight);\n    }\n  },\n  tick: function() {\n\n    // If we haven't yet set the material, look up the\n    // arjs video element and pass it through to the shader\n    var webcamEl = document.getElementById(\"arjs-video\");\n\n    // TODO: We should check if the video is ready to play too\n    // Right now we get some warnings before the video loads\n    if (webcamEl && !this.textureSet) {\n\n      let rendererSize = new THREE.Vector2()\n      this.scene.renderer.getSize(rendererSize)\n\n      let sWidth = rendererSize.width\n      let sHeight = rendererSize.height\n\n      var w = window.innerWidth;\n      var h = window.innerHeight;\n\n      // console.log(\"renderer size\")\n      // console.log(rendererSize)\n      //\n      // console.log(\"window\")\n      // console.log(w)\n      // console.log(h)\n\n      let deltaX = (rendererSize.x - w) * 0.5;\n      let offsetX = deltaX / rendererSize.x;\n\n      let deltaY = (rendererSize.y - h) * 0.5;\n      let offsetY = deltaY / rendererSize.y;\n\n      this.el.setAttribute('material', 'offset', new THREE.Vector2(offsetX, offsetY));\n\n      this.el.setAttribute('material', 'map', '#arjs-video');\n      this.textureSet = true\n    }\n\n    // If the screen resolution has been updated, update the shader uniform\n    if (this.isDirty) {\n      this.el.setAttribute('material', 'resolution', this.resolution);\n      this.isDirty = false\n    }\n  }\n});\n\nAFRAME.registerShader('gaussian-blur', {\n  schema: {\n    map: {type: 'map', is: 'uniform'},\n    resolution: {type: 'vec2', is: 'uniform'},\n    blurAmount: {type: 'vec2', is: 'uniform'},\n    tintAmount: {type: 'float', is: 'uniform'}\n  },\n\n  //TODO: Is there a way we can load these from glsl files`?\n  vertexShader: `\nvarying vec2 vUv;\nuniform vec2 resolution;\n\nvoid main() {\n  vUv = uv;\n  \n  // Default position of vertices\n  // gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  \n  float res = resolution.y / resolution.x;\n  \n  vec2 pos = position.xy; \n\n  // TODO: Need to also crop however we do in browser \n  vec4 uSize = vec4(2.0, 2.0, -0.5, -0.5);\n  \n  // Borrowed from: https://github.com/pailhead/three-screen-quad/blob/master/ScreenQuad.es6.js\n  vec2 transformed = pos * uSize.xy - vec2(1.,-1.) + vec2( uSize.x ,  -uSize.y ) + vec2( uSize.w , - uSize.z ) * 2.;\n\n  gl_Position = vec4( transformed , 1. , 1. );\n}\n`,\n  fragmentShader: `\nvarying vec2 vUv;\nuniform sampler2D map;\nuniform vec2 resolution;\nuniform vec2 blurAmount;\nuniform float tintAmount;\n\n// Single-pass Gaussian blur\n// Borrowed from: https://github.com/Jam3/glsl-fast-gaussian-blur\n// TODO: Let's change this to 9 from 13\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvoid main() {\n      // Blur our pixels!\n      vec4 blurredColor = blur13(map, vUv, resolution, blurAmount);\n      \n      vec4 tintedColor = mix(blurredColor, vec4(0,0,0,1.), tintAmount);\n      \n      // Mix with object color\n      gl_FragColor = tintedColor;\n}\n`\n});"]}