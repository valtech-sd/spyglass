{"version":3,"sources":["components/rotation-trigger.js"],"names":["AFRAME","registerComponent","schema","tiltSideThreshold","type","default","tiltForwardThreshold","twistThreshold","smoothingFactor","debounceTime","init","prevRotation","THREE","Vector3","currRotationRate","prevTimestamp","lastTiltSide","lastTiltForward","lastTwist","data","onTiltSide","utils","bind","onTiltForward","onTwist","el","addEventListener","console","log","update","tick","entity","object3D","radToDeg","Math","visible","transformAxisMatrix","Matrix4","set","adjustedRotation","rotation","toVector3","applyMatrix4","rotationDegrees","x","y","z","currTimestamp","Date","now","deltaTimestamp","abs","deltaTimestampVec","addScalar","smoothingFactorVec","clampDelta","rawDelta","clone","sub","rotationDelta","rotationRate","divide","multiply","weightedHistory","weightedCurrent","add","currTime","emit","remove","pause","play"],"mappings":"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","file":"rotation-trigger.7deb647e.js","sourceRoot":"../../src","sourcesContent":["// Register custom components before loading HTML\n// TODO: This should actually be a combo of a component and a system...!\n// We shouldn't do all the math in the component\nAFRAME.registerComponent('rotation-trigger', {\n    schema: {\n        tiltSideThreshold: {\n            type: 'number',\n            default: 1.1\n        },\n        tiltForwardThreshold: {\n            type: 'number',\n            default: 0.4\n        },\n        twistThreshold: {\n            type: 'number',\n            default: 2.0\n        },\n        // TODO: SET MIN / MAX\n        smoothingFactor: {\n            type: 'number',\n            default: 0.5\n        },\n        debounceTime: {\n            type: 'time',\n            default: 1500\n        }\n    },\n    init: function () {\n\n        // Values used for internal calculation\n        // TODO: How to just have these be set by the schema default?\n        this.prevRotation = new THREE.Vector3(0,0,0)\n        this.currRotationRate = new THREE.Vector3(0,0,0)\n        this.prevTimestamp = -1\n\n        // Last time we detected each event time (for debouncing)\n        this.lastTiltSide = -10000\n        this.lastTiltForward = -10000\n        this.lastTwist = -10000\n\n        // TODO: How to set to default?\n        this.smoothingFactor = this.data.smoothingFactor\n\n        // Bind methods.js\n        this.onTiltSide = AFRAME.utils.bind(this.onTiltSide, this);\n        this.onTiltForward = AFRAME.utils.bind(this.onTiltForward, this);\n        this.onTwist = AFRAME.utils.bind(this.onTwist, this);\n\n        // Attach event listener.\n        // We could do this outside of the component too\n        this.el.addEventListener('tilt-forward', this.onTiltForward);\n        this.el.addEventListener('tilt-side', this.onTiltSide);\n        this.el.addEventListener('twist', this.onTwist);\n\n        console.log(\"initializing marker thing\")\n\n    },\n    onTiltSide: function() {\n        // console.log(\"tilt side!\")\n    },\n    onTiltForward: function() {\n        // console.log(\"tilt forward!\")\n    },\n    onTwist: function() {\n        // console.log(\"Twist\")\n    },\n    update: function () {},\n    tick: function () {\n\n        let entity = this.el.object3D\n        var radToDeg = THREE.Math.radToDeg;\n\n        // Only calculate rotation when entity is visible\n        if (entity.visible) {\n\n            var transformAxisMatrix = new THREE.Matrix4();\n            transformAxisMatrix.set( 1, 0, 0, 0,\n              0, 0, -1, 0,\n              0, 1, 0, 0,\n              0, 0, 0, 1 );\n\n            // Transform the marker's rotation axis so that it\n            // matches the coordinate frame of the scene\n            let adjustedRotation = entity.rotation.toVector3().applyMatrix4(transformAxisMatrix)\n\n            let rotationDegrees = new THREE.Vector3(radToDeg(adjustedRotation.x),\n              radToDeg(adjustedRotation.y),\n              radToDeg(adjustedRotation.z))\n\n            // Get timestamp\n            let currTimestamp = Date.now()  // convert to\n            let deltaTimestamp = (this.prevTimestamp == -1) ? 0 : Math.abs(currTimestamp - this.prevTimestamp)\n\n            // Calculate rotation delta (z-axis)\n            if (deltaTimestamp > 0) {\n\n                let deltaTimestampVec = new THREE.Vector3().addScalar(deltaTimestamp)\n                let smoothingFactorVec = new THREE.Vector3().addScalar(this.smoothingFactor)\n\n                // Account for angle rollover (0-360)\n                // If delta is way too big, adjust it\n                let clampDelta = function (rawDelta) {\n                    if (rawDelta.x > 180) {\n                        rawDelta.x -= 360\n                    } else if (rawDelta.x < -180) {\n                        rawDelta.x += 360\n                    }\n                    if (rawDelta.y > 180) {\n                        rawDelta.y -= 360\n                    } else if (rawDelta.y < -180) {\n                        rawDelta.y += 360\n                    }\n                    if (rawDelta.z > 180) {\n                        rawDelta.z -= 360\n                    } else if (rawDelta.z < -180) {\n                        rawDelta.z += 360\n                    }\n\n                    return rawDelta\n                }\n\n                // We must use vec3 functions; operators are not overloaded...\n                // THREE.js vec functions are also mutative, so clone if you don't\n                // want to modify the original vector!!!\n                let rawDelta = rotationDegrees.clone().sub(this.prevRotation)\n                let rotationDelta = clampDelta(rawDelta)\n                let rotationRate = rotationDelta.clone().divide(deltaTimestampVec).multiply(new THREE.Vector3(10,10,10))\n\n                // Smooth out the rate of rotation\n                let weightedHistory = smoothingFactorVec.clone().multiply(this.currRotationRate)\n                let weightedCurrent = new THREE.Vector3(1.0, 1.0, 1.0).sub(smoothingFactorVec).multiply(rotationRate)\n                this.currRotationRate = weightedHistory.add(weightedCurrent)\n\n                let currTime = Date.now() //millis\n\n                // Detect side tilt\n                if (Math.abs(this.currRotationRate.z) >= this.data.tiltSideThreshold) {\n                    if (currTime - this.lastTiltSide > this.data.debounceTime) {\n                        this.lastTiltSide = currTime\n                        this.el.emit(\"tilt-side\");\n                    } else {\n                        // console.log(\"debounced\")\n                    }\n                }\n\n                // Detect forward tilt\n                // console.log(this.currRotationRate.x);\n                if (Math.abs(this.currRotationRate.x) >= this.data.tiltForwardThreshold) {\n                    if (currTime - this.lastTiltForward > this.data.debounceTime) {\n                        this.lastTiltForward = currTime\n                        this.el.emit(\"tilt-forward\");\n                    } else {\n                        // console.log(\"debounced\")\n                    }\n                }\n\n                // Detect twist\n                // console.log(Math.abs(this.currRotationRate.y))\n                // console.log(this.data.twistThreshold)\n                if (Math.abs(this.currRotationRate.y) >= this.data.twistThreshold) {\n                    if (currTime - this.lastTwist > this.data.debounceTime) {\n                        this.lastTwist = currTime\n                        this.el.emit(\"twist\");\n                    }else {\n                        console.log(\"debounced\")\n                    }\n                }\n            }\n\n\n            this.prevTimestamp = currTimestamp\n\n            // console.log(\"setting prev to \", rotationDegrees)\n            this.prevRotation = rotationDegrees\n            // this.prevRotation.set(rotationDegrees)\n\n        } else {\n            // Reset timestamp if entity is not visible\n            this.prevTimestamp = -1\n            // this.prevRotation.set(0,0,0)\n            this.currRotationRate.set(0, 0, 0)\n        }\n    },\n    remove: function () {},\n    pause: function () {},\n    play: function () {}\n});"]}